/***********************************************************************************************************************
*  OpenStudio(R), Copyright (c) 2020-2023, OpenStudio Coalition and other contributors. All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
*  following conditions are met:
*
*  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
*  disclaimer.
*
*  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
*  disclaimer in the documentation and/or other materials provided with the distribution.
*
*  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote products
*  derived from this software without specific prior written permission from the respective party.
*
*  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative works
*  may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without specific prior
*  written permission from Alliance for Sustainable Energy, LLC.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND ANY CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
*  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER(S), ANY CONTRIBUTORS, THE UNITED STATES GOVERNMENT, OR THE UNITED
*  STATES DEPARTMENT OF ENERGY, NOR ANY OF THEIR EMPLOYEES, BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
*  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
*  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
*  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
***********************************************************************************************************************/

#include <utilities/OpenStudioApplicationPathHelpers.hpp>

// Include the core one as well
#include <openstudio/utilities/core/PathHelpers.hpp>
#include <openstudio/utilities/core/Logger.hpp>
#include <openstudio/OpenStudio.hxx>

#include <sstream>
#include <boost/regex.hpp>
#include <boost/algorithm/string.hpp>
#include <boost/algorithm/string/case_conv.hpp>
#include <iostream>

#if defined _WIN32
#  include <windows.h>
#else
#  include <stdio.h>
#  include <dlfcn.h>
#endif

namespace openstudio {

// Return the version in MAJOR.MINOR.PATCH format (eg '3.0.0')
std::string openStudioApplicationVersion() {
  return "${OPENSTUDIOAPPLICATION_VERSION}";
}

// Includes the prerelease tag but not the build sha, eg: '1.1.0-alpha'. Should match to a github tag
std::string openStudioApplicationVersionWithPrerelease() {
  return "${OpenStudioApplication_VERSION}";
}

// Includes prerelease tag if any, and build sha, eg: '3.0.0-rc1+baflkdhsia'
std::string openStudioApplicationLongVersion() {
  return "${OPENSTUDIOAPPLICATION_LONG_VERSION}";
}

std::string OpenStudioApplicationVersionMajor() {
  return "${PROJECT_VERSION_MAJOR}";
}

std::string OpenStudioApplicationVersionMinor() {
  return "${PROJECT_VERSION_MINOR}";
}

std::string OpenStudioApplicationVersionPatch() {
  return "${PROJECT_VERSION_PATCH}";
}

std::string OpenStudioApplicationVersionPrerelease() {
  return "${PROJECT_VERSION_PRERELEASE}";
}

std::string OpenStudioApplicationVersionBuildSHA() {
  return "${PROJECT_VERSION_BUILD}";
}

openstudio::path getOpenStudioApplicationSourceDirectory() {
  return openstudio::toPath("${CMAKE_SOURCE_DIR}");
}

openstudio::path getOpenStudioApplicationBuildDirectory() {
  return openstudio::toPath("${CMAKE_BINARY_DIR}");
}

openstudio::path getOpenStudioCoalitionMeasuresSourceDirectory() {
  return openstudio::toPath("${openstudio-coalition-measures_SOURCE_DIR}");
}

openstudio::path getOpenStudioApplicationPath() {
  openstudio::path path;
#if defined _WIN32
  TCHAR szPath[MAX_PATH];
  if (GetModuleFileName(nullptr, szPath, MAX_PATH)) {
    LOG_FREE(Debug, "OpenStudioApplicationPathHelpers", "getOpenStudioApplicationPath, szPath = '" << szPath << "'");
    path = toPath(szPath);
  }
#else
  Dl_info info;
  if (dladdr("main", &info)) {
    LOG_FREE(Debug, "OpenStudioApplicationPathHelpers", "getOpenStudioApplicationPath, info.dli_fname = '" << info.dli_fname << "'");
    path = toPath(info.dli_fname);
  }
#endif

  // Note JM 2019-04-24:
  // Let's call assume the GetModuleFileName (windows, though that doesn't really happen)
  // or (more likely) dladdr (Unix) returns just 'OpenStudioApplicationSymlink' (and not '/path/to/OpenStudioApplicationSymlink' or './OpenStudioApplicationSymlink')
  // You first try to locate that OpenStudioApplicationSymlink in the current directory

  // (Another option would be to always start by calling findInSystemPath and modify the findInSystemPath to prepend the PATH list with '.')

  openstudio::path applicationPath = completeAndNormalize(path);
  if (!openstudio::filesystem::exists(applicationPath) || openstudio::filesystem::is_directory(applicationPath)) {
    // It that didn't work, it means it's in the system PATH. So you have to look for it in your PATH by calling findInSystemPath
    // There's no way around it IMHO.
    // Note: This wouldn't be a concern unless you are launching a symlink that lives in your PATH, and outside the directory where the symlink is
    // * ./OpenStudioApplicationSymlink will work
    // * /home/OpenStudioApplicationSymlink will work
    // * OpenStudioApplicationSymlink itself will not work (if you aren't in the same folder as the symlink)

    LOG_FREE(Debug, "ApplicationPathHelpers", "getOpenStudioApplicationPath failed as is, trying in to locate in systemPath");
    path = findInSystemPath(path);
    applicationPath = completeAndNormalize(path);
  }
  if (!openstudio::filesystem::exists(applicationPath) || openstudio::filesystem::is_directory(applicationPath)) {
    LOG_FREE_AND_THROW("ApplicationPathHelpers", "getOpenStudioApplicationPath failed!");
  }

  LOG_FREE(Debug, "ApplicationPathHelpers", "getOpenStudioApplicationPath, found '" << applicationPath << "'");

  return applicationPath;
}

openstudio::path getOpenStudioApplicationDirectory() {
  openstudio::path p = getOpenStudioApplicationPath();
  if (!p.empty()) {
    return p.parent_path();
  }
  return openstudio::path();
}

bool isOpenStudioApplicationRunningFromBuildDirectory() {
#ifdef _WIN32
  openstudio::path buildDir = openstudio::toPath(boost::algorithm::to_upper_copy(openstudio::toString(getOpenStudioApplicationBuildDirectory())));
  openstudio::path runDir = openstudio::toPath(boost::algorithm::to_upper_copy(openstudio::toString(getOpenStudioApplicationDirectory())));
#else
  openstudio::path buildDir = getOpenStudioApplicationBuildDirectory();
  openstudio::path runDir = getOpenStudioApplicationDirectory();
#endif

  return pathBeginsWith(buildDir, runDir);
}

// define the function GetCurrentOpenStudioApplicationModule so we can get its address
#if defined _WIN32
HMODULE GetCurrentOpenStudioApplicationModule() {
  HMODULE hModule = NULL;
  // hModule is NULL if GetModuleHandleEx fails.
  GetModuleHandleEx(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS | GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT,
                    (LPCTSTR)GetCurrentOpenStudioApplicationModule, &hModule);
  return hModule;
}
#else
bool GetCurrentOpenStudioApplicationModule() {
  return true;
}
#endif

openstudio::path getOpenStudioApplicationModule() {
  openstudio::path path;
#if defined _WIN32
  TCHAR szPath[MAX_PATH];
  if (GetModuleFileName(GetCurrentOpenStudioApplicationModule(), szPath, MAX_PATH)) {
    LOG_FREE(Debug, "OpenStudioApplicationPathHelpers", "getOpenStudioApplicationModule, szPath = '" << szPath << "'");
    path = toPath(szPath);
  }
#else
  Dl_info info;
  if (dladdr("GetCurrentOpenStudioApplicationModule", &info)) {
    LOG_FREE(Debug, "OpenStudioApplicationPathHelpers", "getOpenStudioApplicationModule, info.dli_fname = '" << info.dli_fname << "'");
    path = toPath(info.dli_fname);
  }
#endif

  // Note JM 2019-04-24:
  // Let's call assume the GetModuleFileName (windows, though that doesn't really happen)
  // or (more likely) dladdr (Unix) returns just 'OpenStudioApplicationSymlink' (and not '/path/to/OpenStudioApplicationSymlink' or './OpenStudioApplicationSymlink')
  // You first try to locate that OpenStudioApplicationSymlink in the current directory

  // (Another option would be to always start by calling findInSystemPath and modify the findInSystemPath to prepend the PATH list with '.')
  openstudio::path openstudioDirPath = openstudio::completeAndNormalize(path);

  if (!openstudio::filesystem::exists(openstudioDirPath) || openstudio::filesystem::is_directory(openstudioDirPath)) {
    LOG_FREE(Debug, "OpenStudioApplicationPathHelpers", "getOpenStudioApplicationModule failed as is, trying in to locate in systemPath");
    path = findInSystemPath(path);
    openstudioDirPath = completeAndNormalize(path);
  }
  if (!openstudio::filesystem::exists(openstudioDirPath) || openstudio::filesystem::is_directory(openstudioDirPath)) {
    LOG_FREE_AND_THROW("OpenStudioApplicationPathHelpers", "getOpenStudioApplicationModule failed!");
  }

  LOG_FREE(Debug, "ApplicationPathHelpers", "getOpenStudioApplicationModule, found '" << openstudioDirPath << "'");
  return openstudioDirPath;
}

openstudio::path getOpenStudioApplicationModuleDirectory() {
  return getOpenStudioApplicationModule().parent_path();
}

bool isOpenStudioApplicationModuleRunningFromBuildDirectory() {
#ifdef _WIN32
  openstudio::path buildDir = openstudio::toPath(boost::algorithm::to_upper_copy(openstudio::toString(getOpenStudioApplicationBuildDirectory())));
  openstudio::path runDir = openstudio::toPath(boost::algorithm::to_upper_copy(openstudio::toString(getOpenStudioApplicationModuleDirectory())));
#else
  openstudio::path buildDir = getOpenStudioApplicationBuildDirectory();
  openstudio::path runDir = getOpenStudioApplicationModuleDirectory();
#endif

  return pathBeginsWith(buildDir, runDir);
}

openstudio::path getOpenStudioCoreCLI() {
  openstudio::path cliPath;

  // Windows
  // . ( build )
  // ├── Products
  // │   ├── Debug
  // │   │   └── OpenStudioApp
  // │   └── Release
  // │       └── OpenStudioApp
  // openstudio (core build)
  // ├── Products
  // │   ├── ruby
  // │   │   ├── Debug
  // │   │   │   └── openstudio.lib
  // │   │   └── Release
  // │   │       └── openstudio.lib
  // │   ├── Debug
  // │   │   └── openstudio
  // │   ├── Release
  // │   │   └── openstudio

  // Unix
  // . ( build )
  // ├── Products
  // │   ├── OpenStudioApp
  // openstudio (core build)
  // ├── Products
  // │   ├── ruby
  // │   │   └── openstudio.so
  // │   └─── openstudio

  cliPath = getOpenStudioApplicationModuleDirectory() / toPath("${OS_CLI_IMPORTED_NAME}");

  // If it doesn't exist or it's a directory, try the imported location from the sdk
  if (!openstudio::filesystem::exists(cliPath) || openstudio::filesystem::is_directory(cliPath)) {
    cliPath = toPath("${OS_CLI_IMPORTED_PATH}");
  }

  LOG_FREE(Debug, "OpenStudioApplicationPathHelpers", "Searching for CLI in '" << cliPath << "'");
  if (openstudio::filesystem::exists(cliPath) && !openstudio::filesystem::is_directory(cliPath)) {
    LOG_FREE(Debug, "OpenStudioApplicationPathHelpers", "Found CLI at '" << completeAndNormalize(cliPath) << "'");
    return completeAndNormalize(cliPath);
  }

// Regardless of platform, this is the installed structure
// . (installed)
// ├── bin
// │   ├── OpenStudioApp
// │   ├── openstudio
// ├── Ruby
// │   └── openstudio.so (.lib)

// If at this point we still haven't found it, assume it's the installed ruby that's used
#if defined _WIN32
  cliPath = getOpenStudioApplicationModuleDirectory() / toPath("../bin/openstudio.exe");
#else
  cliPath = getOpenStudioApplicationModuleDirectory() / toPath("../bin/openstudio");
#endif

  LOG_FREE(Debug, "OpenStudioApplicationPathHelpers", "Searching for CLI in '" << cliPath << "'");
  if (openstudio::filesystem::exists(cliPath) && !openstudio::filesystem::is_directory(cliPath)) {
    LOG_FREE(Debug, "OpenStudioApplicationPathHelpers", "Found CLI at '" << completeAndNormalize(cliPath) << "'");
    return completeAndNormalize(cliPath);
  }

  return openstudio::path();
}

}  // namespace openstudio
